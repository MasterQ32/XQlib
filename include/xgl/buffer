#ifndef XGL_BUFFER_HPP
#define XGL_BUFFER_HPP

#include <GL/gl3w.h>
#include <utility>
#include <vector>
#include <gsl/gsl>

namespace xgl
{
	struct buffer
	{
		GLuint id;

	public:
		buffer() {
			glCreateBuffers(1, &id);
		}

		buffer(buffer const &) = delete;

		buffer(buffer && other) : id(other.id) {
			other.id = 0;
		}

		~buffer()
		{
			if(id != 0)
				glDeleteBuffers(1, &id);
		}
	public:
		void storage(size_t size, GLbitfield flags = 0) {
			glNamedBufferStorage(id, gsl::narrow<GLsizei>(size), nullptr, flags);
		}

		void storage(size_t size, const void *data, GLbitfield flags = 0) {
			glNamedBufferStorage(id, gsl::narrow<GLsizei>(size), data, flags);
		}

		template<typename T>
		void storage(std::vector<T> const & src, GLbitfield flags = 0) {
			storage(sizeof(T) * src.size(), src.data(), flags);
		}

		template<typename T, size_t N>
		void storage(std::array<T, N> const & src, GLbitfield flags = 0) {
			storage(sizeof(T) * src.size(), src.data(), flags);
		}

		template<typename T, size_t N>
		void storage(T const (&src)[N], GLbitfield flags = 0) {
			storage(sizeof(T) * N, src, flags);
		}

		void data(GLsizei size, const void *data, GLenum usage = GL_STATIC_DRAW) {
			glNamedBufferData(id, size, data, usage);
		}

		template<typename T>
		void data(T const * data, size_t count, GLenum usage = GL_STATIC_DRAW) {
			glNamedBufferData(id, sizeof(T) * count, data, usage);
		}

		template<typename T, size_t count>
		void data(T const (&data)[count], GLenum usage = GL_STATIC_DRAW) {
			glNamedBufferData(id, sizeof(T) * count, data, usage);
		}

		template<typename T>
		void data(std::vector<T> const & data, GLenum usage = GL_STATIC_DRAW) {
			glNamedBufferData(id, sizeof(T) * data.size(), data.data(), usage);
		}

		void subData(GLsizei size, const void *data) {
			glNamedBufferSubData(id, 0, size, data);
		}

		void subData(GLintptr offset, GLsizei size, const void *data) {
			glNamedBufferSubData(id, offset, size, data);
		}

	public:
		operator GLuint () const {
			return id;
		}

		operator bool() const {
			return (id != 0);
		}
	};
}

#endif
