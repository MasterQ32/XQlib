#ifndef XGL_PROGRAM_HPP
#define XGL_PROGRAM_HPP

#include <GL/gl3w.h>
#include <utility>
#include <map>
#include <string>

#include "../xlog"
#include "../xstd/optional"

#include "shader"

#include <glm/glm.hpp>


namespace xgl
{
	struct program
	{
		GLuint id;
		mutable std::map<std::string, GLint> uniformCache;

	private:
		explicit program(GLuint pgm) : id(pgm) { }
	public:
		program() : id(glCreateProgram())
		{

		}

		program(program const &) = delete;

		program(program && other) : id(other.id)
		{
			other.id = 0;
		}

		~program()
		{
			if(id != 0)
				glDeleteProgram(id);
		}

		program & operator = (program && other)
		{
			this->~program();
			new (this) program(std::move(other));
			return *this;
		}

		static xstd::optional<program> create_stage(GLenum shader_type, std::string const & code)
		{
			auto const str = code.c_str();
			GLuint id = glCreateShaderProgramv(shader_type, 1, &str);
			if(id != 0)
				return program(id);
			else
				return xstd::nullopt;
		}
	public:
		void use() const {
			glUseProgram(id);
		}

		void link() {
			glLinkProgram(id);
			uniformCache.clear();
		}

		void attach(GLuint shader) {
			glAttachShader(id, shader);
		}

		void attach(xgl::shader const & sh) {
			glAttachShader(id, sh.id);
		}

		void detach(GLuint shader) {
			glDetachShader(id, shader);
		}

		void detach(xgl::shader const & sh) {
			glDetachShader(id, sh.id);
		}

		GLint getUniformLocation(char const * name) const {
			return getUniformLocation(std::string(name));
		}

		GLint getUniformLocation(std::string const & name) const {
			auto it = uniformCache.find(name);
			if(it == uniformCache.end()) {
				auto loc = glGetUniformLocation(id, name.c_str());
				if(loc == -1)
					xlog::log("xgl::program", xlog::warning) << "could not find uniform '" << name << "'.";
				uniformCache.emplace(name, loc);
				return loc;
			} else {
				return it->second;
			}
		}

	public:
#include "detail/program_uniforms.h"

	public:
		program & operator << (xgl::shader const & sh) {
			attach(sh);
			return *this;
		}

		program & operator >> (xgl::shader const & sh) {
			detach(sh);
			return *this;
		}
	public:
		operator GLuint () const {
			return id;
		}

		operator bool() const {
			return (id != 0);
		}
	};
	static_assert(std::is_move_constructible_v<program>);
	static_assert(std::is_move_assignable_v<program>);
}
#endif // PROGRAM_HPP
