#pragma once

#include <SDL.h>
#include <string>
#include <glm/glm.hpp>
#include <functional>
#include <xstd/optional>

//! *xapp* is an SDL2 abstraction layer that provides
//! managed event and window handling.
//! It creates a window and initializes OpenGL if required, provides
//! a non-owning mainloop interface (@ref init, @ref update, @ref shutdown),
//! so each application retains control over the main loop.
//!
//! xapp provides both SDL_Renderer and OpenGL backends for drawing. These can
//! only be used mutual exclusive. @ref xapp::present flips either the
//! SDL_Renderer surface or the OpenGL back buffer, so the same api is kept.
//!
//! xapp also exposes a simple event routing mechanism which allows a single
//! callback per SDL_EventType. To consume all SDL events, an event filter can
//! be installed. Each event filter may prevent all following event filters
//! and handlers from beeing executed, so other systems (as @ref xinput::sdl)
//! can handle events.
//!
//! ```cpp
//! int main()
//! {
//!		if(not xapp::init(xapp::opengl))
//!			return 1;
//!		while(xapp::update())
//!		{
//!			xapp::clear();
//!
//!			xapp::present();
//!		}
//!		return xapp::quit();
//! }
//! ```
namespace xapp
{
	extern SDL_Window   * window;
	extern SDL_Renderer * renderer;
	extern SDL_GLContext  glcontext;

	//! A function type that handles SDL events.
	using event_handler = std::function<void(SDL_Event const &)>;

	//! A function type that is used for filtering SDL events.
	//! If the function returns `true`, the filter tells xapp
	//! to not process this event.
	using event_filter  = std::function<bool(SDL_Event const &)>;

	enum mode
	{
		uninitialized = 0, ///< xapp was not initialized.
		opengl = 1,        ///< initialize xapp with OpenGL backend
		sdl = 2,           ///< initialize xapp with SDL backend.
	};

	struct options
	{
		std::string title;     ///< Window title
		glm::ivec2 resolution; ///< Internal window resolution
		bool fullscreen;       ///< If set `true`, the application will start in "borderless fullscreen" mode. @ref resolution is ignored.
		bool resizable;        ///< If set `true`, the application window will be resizable.
		bool enable_imgui;     ///< If set `true`, dear imgui support for the main window will be enabled.
		bool enable_vsync;     ///< If set `true`, the render chain will use vsync.
		xstd::optional<unsigned int> num_samples; ///< If set to value, it defines the number of samples for multisampling

		options(
		    std::string const & title = "Untitled XApp",
		    glm::ivec2 resolution = glm::ivec2(1280, 720),
		    bool fullscreen = false,
		    bool resizable = false);
	};

	//! Initializes xapp with either `opengl` or `sdl` mode.
	//! @ref mode the mode to initialize xapp with
	//! @ref opt  options for initialization. Defines window size, title and features.
	//! @returns `true` on success
	bool init(mode mode, options const & opt = options());

	//! Returns the mode xapp was initialized with or `uninitialized`
	//! if no initialization was done yet.
	mode was_init();

	//! Adds an event filter to the update loop.
	//! The event filters are called in first-to-last order.
	//! If any event filter returns `true`, the event processing
	//! is stopped.
	//! @see set_event_handler, update
	void add_event_filter(event_filter const & filt);

	//! Adds a generic event handler for the given event type.
	void set_event_handler(SDL_EventType type, event_handler const & handler);

	//! Removes a previously installed event handler
	void remove_event_handler(SDL_EventType type);

	template<SDL_EventType type>
	struct sdl_event;

	template<SDL_EventType type>
	typename sdl_event<type>::type const & convert_sdl_event(SDL_Event const & ev);

	//! Adds an event handler for a specific SDL event.
	//! The event handler parameter is automatically selected for the
	//! given event type, so this skips union field access overhead.
	template<SDL_EventType type>
	void set_event_handler(std::function<void(typename sdl_event<type>::type const &)> const & handler)
	{
		set_event_handler(type, [=](SDL_Event const & ev)
		{
			handler(convert_sdl_event<type>(ev));
		});
	}

	//! Updates the application and pumps events.
	//! @returns `true` while the app is active, `false` when the app is being
	//! shut down.
	bool update();

	//! Clears the screen with a color.
	//! For OpenGL mode, it unbinds any active framebuffer and clears the actual
	//! screen. In SDL mode, it uses the main SDL_Renderer to clear the screen.
	void clear(glm::vec4 const & color = glm::vec4(0,0,0,1));

	//! Flips the back buffer of either the SDL backend or the OpenGL backend
	//! and presents the current image.
	void present();

	//! Notifies the application to shut down. Forces @ref update to return `false`.
	//! @param exit_code the exit code of the application. Is returned by quit.
	void shutdown(int exit_code = 0);

	//! Releases all resources taken by the application.
	//! @returns the exit code passed to shutdown() or zero.
	int quit();

	//! Returns the inner window size of the current xapp window.
	glm::ivec2 get_screen_resolution();

	//! Returns the inner window width of the current xapp window.
	inline int width() {
		return get_screen_resolution().x;
	}

	//! Returns the inner window height of the current xapp window.
	inline int height() {
		return get_screen_resolution().y;
	}

	//! Enables or disables xinput support in xapp.
	//! If enabled, xapp automatically calls @ref xinput::begin_update
	//! and @ref xinput::end_update in @ref xapp::update.
	//! @remarks `xapp::add_event_filter(xinput::process_events)` must still be
	//!          called manually.
	void enable_xinput(bool enabled = true);

	//! Returns the delta time between the last two update calls in seconds.
	float dt();

	//! Returns the total time since the application start in seconds.
	float time();

	//! Returns the number of frames per second.
	//! Has a hard-cap to to 1000 FPS
	float fps(bool smoothed = true);

	//! Returns the screens aspect ratio
	inline float aspect() {
		return float(width()) / float(height());
	}
}




// Separated from declarations above. Provides conversion from SDL_Event union
// to correct event type. Kinda x-macro thing here.
namespace xapp
{
#define XAPP_EV(_Enum,_Subscript) \
	template<> struct sdl_event<_Enum> { using type = decltype(SDL_Event::_Subscript); }; \
	template<> inline typename sdl_event<_Enum>::type const & convert_sdl_event<_Enum>(SDL_Event const & ev) \
	{ \
		return ev._Subscript; \
	}

	XAPP_EV(SDL_WINDOWEVENT,     window)
	XAPP_EV(SDL_DISPLAYEVENT,    display)
	XAPP_EV(SDL_KEYDOWN,         key)
	XAPP_EV(SDL_KEYUP,           key)
	XAPP_EV(SDL_TEXTEDITING,     edit)
	XAPP_EV(SDL_TEXTINPUT,       text)
	XAPP_EV(SDL_MOUSEMOTION,     motion)
	XAPP_EV(SDL_MOUSEBUTTONDOWN, button)
	XAPP_EV(SDL_MOUSEBUTTONUP,   button)
	XAPP_EV(SDL_MOUSEWHEEL,      wheel)
	// ...
	XAPP_EV(SDL_QUIT,            quit)
	// SDL_USEREVENT is ignored here!
	XAPP_EV(SDL_SYSWMEVENT,      syswm)
	XAPP_EV(SDL_FINGERDOWN,      tfinger)
	XAPP_EV(SDL_FINGERUP,        tfinger)
	XAPP_EV(SDL_FINGERMOTION,    tfinger)
	// ...

#undef XAPP_EV
}
