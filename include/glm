#ifndef XQLIB_GLM_HPP
#define XQLIB_GLM_HPP

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/quaternion.hpp>

#include <ostream>

namespace glm
{
	// Make glm::vec<â€¦> loggable!
	template<typename TChar, typename TComponent, glm::length_t Length, glm::precision Precision>
	inline std::basic_ostream<TChar> & operator<< (std::basic_ostream<TChar> & stream, glm::vec<Length, TComponent, Precision> const & vec)
	{
		stream << "(";
		for(size_t i = 0; i < Length; i++)
		{
			if(i > 0)
				stream << ", ";
			stream << vec[glm::length_t(i)];
		}
		stream << ")";
		return stream;
	}

	template<typename T, glm::length_t N, glm::qualifier Q>
	glm::vec<N, T, Q> component_min(glm::vec<N, T, Q> const & a, glm::vec<N, T, Q> const & b)
	{
		glm::vec<N, T, Q> result;
		for(size_t i = 0; i < N; i++)
			result[i] = glm::min(a[i], b[i]);
		return result;
	}

	template<typename T, glm::length_t N, glm::qualifier Q>
	glm::vec<N, T, Q> component_max(glm::vec<N, T, Q> const & a, glm::vec<N, T, Q> const & b)
	{
		glm::vec<N, T, Q> result;
		for(size_t i = 0; i < N; i++)
			result[i] = glm::max(a[i], b[i]);
		return result;
	}
}

#endif // GLM_HPP
