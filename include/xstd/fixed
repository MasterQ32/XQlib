#ifndef XQLIB_XSTD_FIXED_HPP
#define XQLIB_XSTD_FIXED_HPP

#include "type_traits/integer"

namespace xstd
{
	//! fixed point arithmetic type with configurable size.
	//! @tparam IntegralBits Number of integral bits
	//! @tparam DecimalBits Number of decimal bits
	template<std::size_t IntegralBits, std::size_t DecimalBits>
	struct fixed
  {
	public: // template argument propagation
		static constexpr std::size_t integral_bits = IntegralBits;
		static constexpr std::size_t decimal_bits = DecimalBits;

  public: // static types
		typedef typename type_traits::int_by_size<std::size_t((integral_bits + decimal_bits + 7) / 8)>::type word_t;
		typedef typename type_traits::next_bigger_int<word_t>::type dword_t; // double word
		typedef typename type_traits::next_smaller_int<word_t>::type hword_t; // half word

  public: // static members
		static constexpr word_t decimal_factor = (1 << decimal_bits);
		static constexpr word_t decimal_mask   = (decimal_factor - 1);
		static constexpr word_t integral_mask  = ~decimal_mask;

		static_assert(decimal_mask >= 0, "Too many decimal bits! Exceeds bit limit");
		static_assert(integral_mask != 0, "Too many decimal bits! Exceeds bit limit");

  public: // members
		word_t value;

  public: // constructors
		fixed() = default;
		constexpr fixed(fixed const &) = default;
		// constexpr fixed() : value(0) { }
		constexpr fixed(float v)  : value(word_t(v * decimal_factor + 0.5f)) { }
		constexpr fixed(double v) : value(word_t(v * decimal_factor + 0.5)) { }
		constexpr fixed(int i)    : value(word_t(i) * decimal_factor) { }
		constexpr fixed(unsigned int i)    : value(word_t(i) * decimal_factor) { }

  public: // functions

		constexpr static fixed raw(word_t value)
		{
				fixed f(0);
				f.value = value;
				return f;
		}

		//! returns the smallest possible value representable by fixed.
		static constexpr fixed epsilon()
		{
			fixed f(0);
			f.value = 1;
			return f;
		}

		constexpr word_t decimal_part() const {
				return this->value & decimal_mask;
		}

		constexpr word_t integral_part() const {
				return this->value & integral_mask;
		}

  public: // arithmetic operators

		constexpr fixed operator+() const
		{
			return *this;
		}

		constexpr fixed operator-() const
		{
			return fixed::raw(-value);
		}

		constexpr fixed operator+ (fixed o) const
		{
				return fixed::raw(this->value + o.value);
		}

		constexpr fixed operator- (fixed o) const
		{
				return fixed::raw(this->value - o.value);
		}

		constexpr fixed operator* (fixed o) const {
				fixed r = *this;
				r.mul(o);
				return r;
		}

		constexpr fixed operator* (hword_t o) const {
				fixed r = *this;
				r.mul(o);
				return r;
		}

		constexpr fixed operator/ (fixed o) const {
				fixed r = *this;
				r.div(o);
				return r;
		}

		constexpr fixed operator/ (hword_t o) const {
				fixed r = *this;
				r.div(o);
				return r;
		}

		constexpr fixed operator% (fixed o) const
		{
			fixed r = *this;
			r.value %= o.value;
			return r;
		}

  public: // self-applying arithmetic operators
		constexpr fixed & operator += (fixed o) {
				return (*this = *this + o);
		}

		constexpr fixed & operator -= (fixed o) {
				return (*this = *this - o);
		}

		constexpr fixed & operator *= (fixed o) {
				this->mul(o);
				return *this;
		}

		constexpr fixed & operator *= (hword_t o) {
				this->mul(o);
				return *this;
		}

		constexpr fixed & operator /= (fixed o) {
				this->div(o);
				return *this;
		}

		constexpr fixed & operator /= (hword_t o) {
				this->div(o);
				return *this;
		}

		constexpr fixed & operator %= (fixed o) {
				*this = *this % o;
				return *this;
		}

	public: // relational operators
		constexpr bool operator ==(fixed o) const {
				return (this->value == o.value);
		}
		constexpr bool operator !=(fixed o) const {
				return (this->value != o.value);
		}
		constexpr bool operator >=(fixed o) const {
				return (this->value >= o.value);
		}
		constexpr bool operator <=(fixed o) const {
				return (this->value <= o.value);
		}
		constexpr bool operator >(fixed o) const {
				return (this->value > o.value);
		}
		constexpr bool operator <(fixed o) const {
				return (this->value < o.value);
		}

	public: // bitwise operators
		constexpr fixed operator~ () const
		{
			return raw(~this->value);
		}

		constexpr fixed operator & (fixed o) const
		{
			return raw(this->value & o.value);
		}

		constexpr fixed operator | (fixed o) const
		{
			return raw(this->value | o.value);
		}

		constexpr fixed operator ^ (fixed o) const
		{
			return raw(this->value ^ o.value);
		}

		constexpr fixed operator << (std::size_t bits) const
		{
			using uword_t = std::make_unsigned_t<word_t>();
			auto const val = reinterpret_cast<uword_t>(this->value);
			val <<= bits;
			return raw(reinterpret_cast<word_t>(val));
		}

		constexpr fixed operator >> (std::size_t bits) const
		{
			using uword_t = std::make_unsigned_t<word_t>();
			auto uval = reinterpret_cast<uword_t>(this->value);
			uval >>= bits;
			if(this->value < 0)
			{
				// now sign-extend the shifted value by bits
				uval |= ~(uword_t(-1) >> bits);
			}
			return raw(reinterpret_cast<word_t>(uval));
		}

	public: // bitwise selfapplying operators
		constexpr fixed & operator &= (fixed o) const
		{
			*this = (*this & o);
			return *this;
		}

		constexpr fixed & operator |= (fixed o) const
		{
			*this = (*this | o);
			return *this;
		}

		constexpr fixed & operator ^= (fixed o) const
		{
			*this = (*this ^ o);
			return *this;
		}

		constexpr fixed & operator <<= (std::size_t bits) const
		{
			*this = (*this << bits);
			return *this;
		}

		constexpr fixed & operator >>= (std::size_t bits) const
		{
			*this = (*this >> bits);
			return *this;
		}

  public: // conversion operators
      explicit constexpr operator int() const {
          return (this->value / decimal_factor);
      }

      explicit constexpr operator float() const {
          return (this->value / float(decimal_factor));
      }

      explicit constexpr operator double() const {
          return (this->value / double(decimal_factor));
      }

	public: // assignment operators
		constexpr fixed & operator= (fixed const & other) = default;

  private: // arithmetic
      constexpr void mul(fixed const & o)
      {
          dword_t const r = dword_t(this->value) * o.value;
          this->value = word_t(r / decimal_factor);
      }

      constexpr void mul(std::make_signed_t<hword_t> o)
      {
          this->value *= o;
      }

      constexpr void mul(std::make_unsigned_t<hword_t> o)
      {
          this->value *= o;
      }

      constexpr void div(const fixed& o)
      {
          // assert(o.value != 0);
          dword_t const x = dword_t(this->value) * decimal_factor;
          this->value = word_t(x / o.value);
      }

      constexpr void div(std::make_signed_t<hword_t> o)
      {
          // assert(o != 0);
          this->value /= o;
      }

      constexpr void div(std::make_unsigned_t<hword_t>o)
      {
          // assert(o != 0);
          this->value /= o;
      }
  };

	template<std::size_t I, std::size_t D>
  inline constexpr fixed<I, D> floor(fixed<I, D> val)
	{
		return fixed<I, D>::raw(val.integral_part());
  }

	template<std::size_t I, std::size_t D>
  inline constexpr fixed<I, D> ceil(fixed<I, D> val)
	{
      return floor(val + fixed<I,D>::raw(val.decimal_mask));
  }

  template<std::size_t I, std::size_t D>
  inline constexpr fixed<I, D> fract(fixed<I, D> val)
	{
      return fixed<I, D>::raw(val.decimal_part());
  }

  template<std::size_t I, std::size_t D>
  inline constexpr fixed<I, D> abs(fixed<I, D> val)
	{
      if(val.value < 0)
          return fixed<I, D>::raw(-val.value);
      else
          return fixed<I, D>::raw(val.value);
  }
}

#include <limits>
namespace std
{
	template<std::size_t I, std::size_t D>
	struct numeric_limits<xstd::fixed<I,D>>
	{
		typedef xstd::fixed<I,D> type;
    static constexpr bool is_specialized = true;

    static constexpr type
    min() noexcept { return type::raw(1); }

    static constexpr type max() noexcept { return type::raw(std::numeric_limits<typename type::word_t>::max()); }

    static constexpr type lowest() noexcept { return type::raw(std::numeric_limits<typename type::word_t>::min()); }

    static constexpr int digits = I+D;
    // static constexpr int digits10 = ;
    //  static constexpr int max_digits10 = __glibcxx_max_digits10 (__FLT_MANT_DIG__);

    static constexpr bool is_signed = true;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = 2;

    static constexpr type epsilon() noexcept { return min(); }

    static constexpr type round_error() noexcept { return type(0.5f); }

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;

    static constexpr bool is_iec559 = true;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;

    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
}

#endif
