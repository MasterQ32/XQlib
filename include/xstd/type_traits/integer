#ifndef XQLIB_XSTD_TYPE_TRAITS_INTEGER_HPP
#define XQLIB_XSTD_TYPE_TRAITS_INTEGER_HPP

#include <type_traits>
#include <cstdint>

namespace xstd::type_traits
{
	template<typename T>
  struct next_bigger_int;

  template<> struct next_bigger_int<uint8_t>   { typedef uint16_t type; };
  template<> struct next_bigger_int<uint16_t>  { typedef uint32_t type; };
  template<> struct next_bigger_int<uint32_t>  { typedef uint64_t type; };

  template<> struct next_bigger_int<int8_t>    { typedef int16_t  type; };
  template<> struct next_bigger_int<int16_t>   { typedef int32_t  type; };
  template<> struct next_bigger_int<int32_t>   { typedef int64_t  type; };

  template<typename T>
  struct next_smaller_int;

  template<> struct next_smaller_int<uint8_t>  { typedef uint8_t type;  };
  template<> struct next_smaller_int<uint16_t> { typedef uint8_t type;  };
  template<> struct next_smaller_int<uint32_t> { typedef uint16_t type; };
  template<> struct next_smaller_int<uint64_t> { typedef uint32_t type; };

  template<> struct next_smaller_int<int8_t>   { typedef int8_t type;   };
  template<> struct next_smaller_int<int16_t>  { typedef int8_t type;   };
  template<> struct next_smaller_int<int32_t>  { typedef int16_t type;  };
  template<> struct next_smaller_int<int64_t>  { typedef int32_t type;  };


  template<std::size_t size>
  struct int_by_size;

  template<> struct int_by_size<1>       { typedef int8_t  type; };
  template<> struct int_by_size<2>       { typedef int16_t type; };
  template<> struct int_by_size<3>       { typedef int32_t type; };
  template<> struct int_by_size<4>       { typedef int32_t type; };
  template<> struct int_by_size<5>       { typedef int64_t type; };
  template<> struct int_by_size<6>       { typedef int64_t type; };
  template<> struct int_by_size<7>       { typedef int64_t type; };
  template<> struct int_by_size<8>       { typedef int64_t type; };

  template<std::size_t size>
	struct uint_by_size;

  template<> struct uint_by_size<1>     { typedef uint8_t  type; };
  template<> struct uint_by_size<2>     { typedef uint16_t type; };
  template<> struct uint_by_size<3>     { typedef uint32_t type; };
  template<> struct uint_by_size<4>     { typedef uint32_t type; };
  template<> struct uint_by_size<5>     { typedef uint64_t type; };
  template<> struct uint_by_size<6>     { typedef uint64_t type; };
  template<> struct uint_by_size<7>     { typedef uint64_t type; };
  template<> struct uint_by_size<8>     { typedef uint64_t type; };
}

#endif // XQLIB_XSTD_TYPE_TRAITS_INTEGER_HPP
