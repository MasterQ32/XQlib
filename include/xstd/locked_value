#ifndef XQLIB_XSTD_LOCKED_VALUE_HPP
#define XQLIB_XSTD_LOCKED_VALUE_HPP

#include <mutex>

namespace xstd
{
	template<typename T>
	struct locked_value;

	//!
	//! Value accessor of a protected_value<T>.
	//! Allows access via *, -> and value() method.
	//!
	template<typename T>
	struct value_access
	{
		typedef std::remove_const_t<T> underlying_type;
		friend struct locked_value<underlying_type>;
	private:
		locked_value<underlying_type> & _value;
		std::lock_guard<std::mutex> _guard;

		explicit value_access(locked_value<underlying_type> & val) :
			_value(val),
		  _guard(val.mutex)
		{

		}

	public:
		T & value();
		T const & value() const;

	public:
		T &       operator*()       { return value(); }
		T const & operator*() const { return value(); }

		T *       operator->()       { return &value(); }
		T const * operator->() const { return &value(); }

		T &       operator= (T const & other) { return value() = other; }
		T &       operator= (T && other)      { return value() = std::move(other); }
	};

	//!
	//! A value guarded by a mutex.
	//! Must call obtain() to receive access to the handle.
	//!
	template<typename T>
	struct locked_value
	{
	private:
		T value;
		std::mutex mutex;
	public:
		friend struct value_access<T>;

		explicit locked_value(T const & _value = T { }) :
		  value(_value)
		{
		}

		explicit locked_value(T && _value) :
		  value(std::move(_value))
		{
		}

		value_access<T>       obtain()       { return value_access<T> { *this }; }
		value_access<const T> obtain() const { return value_access<const T> { *this }; }
	};


	template<typename T>
	T & value_access<T>::value() {
		return _value.value;
	}

	template<typename T>
	T const & value_access<T>::value() const {
		return _value.value;
	}
}


#endif // LOCKED_VALUE_HPP
