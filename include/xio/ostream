#ifndef XQLIB_OSTREAM_HPP
#define XQLIB_OSTREAM_HPP

#include <cstddef>
#include <type_traits>
#include <array>
#include <cstring>
#include <string>
#include <vector>

namespace xio
{
	//! basic stream for writing data.
	struct ostream
	{
		ostream() noexcept;
		ostream(ostream const &) = delete;
		ostream(ostream &&) = default;
		virtual ~ostream() noexcept;

		virtual size_t write_raw(void const * data, size_t length) = 0;

		void write(void const * data, size_t length);

		template<typename T>
		std::enable_if_t<std::is_pod_v<T>> write(T const & value)
		{
			write(&value, sizeof value);
		}

		void write(char const * string)
		{
			write(string, strlen(string));
		}

		void write(std::string const & string)
		{
			write(string.data(), string.size());
		}

		void write_line()
		{
			write('\n');
		}

		void write_line(char const * string)
		{
			write(string);
			write('\n');
		}

		void write_line(std::string const & string)
		{
			write(string);
			write('\n');
		}

		template<typename T, size_t N>
		void write_range(T const (& array)[N])
		{
			for(size_t i = 0; i < N; i++)
				write(array[i]);
		}

		template<typename T, size_t N>
		void write_range(std::array<T, N> const & array)
		{
			for(size_t i = 0; i < N; i++)
				write(array[i]);
		}

		template<typename T>
		void write_range(std::vector<T> const & array)
		{
			for(size_t i = 0; i < array.size(); i++)
				write(array[i]);
		}

		template<typename T>
		void write_range(T const * ptr, size_t n)
		{
			write(reinterpret_cast<void const *>(ptr), sizeof(T) * n);
		}

		template<typename Iterator>
		void write_range(Iterator begin, Iterator end)
		{
			for(auto it = begin; it != end; it++)
				write(*it);
		}
	};
}

#endif // OSTREAM_HPP
